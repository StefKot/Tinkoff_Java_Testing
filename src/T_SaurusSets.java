/*–í –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–µ –±—ã–ª–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ¬´T-Saurus¬ª.
        –í —ç—Ç–æ–π –∑–∞–¥–∞—á–µ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å core-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã.
        –í–º–µ—Å—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –∏—Ö –ø–æ—Ä—è–¥–æ–∫, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è —ç—Ç–æ –≤—Ä–µ–º—è.
        –î–ª—è —ç—Ç–æ–≥–æ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑–±–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –Ω–µ–ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–ø—Ä–æ–Ω—É–º–µ—Ä—É–µ–º –∏—Ö –æ—Ç 1 –¥–æ ùëò) —Ç–∞–∫,
        —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ¬´T-Saurus¬ª –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–µ—Ä–≤–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞,
        –∑–∞—Ç–µ–º –≤—Ç–æ—Ä–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏ —Ç.–¥., –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–ª–æ —É—Å–ª–æ–≤–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏.
        –¢. –µ. –≤ i-–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã,
        –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –∏—Ö –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å—ã –≤–∫–ª—é—á–µ–Ω—ã –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞—Ö —Å –º–µ–Ω—å—à–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ j: 1‚â§ùëó<i.
        –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–∏—Å—Ç–µ–º—ã ¬´T-Saurus¬ª —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç–æ–º,
        —á—Ç–æ –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –º–Ω–æ–∂–µ—Å—Ç–≤ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ –æ—á–µ—Ä–µ–¥–Ω–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ —Å–º–æ–≥—É—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç—å—Å—è.
        –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏.
        –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, –∫–∞–∫ –¥–æ–ª–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –∫–∞–∂–¥–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ ‚Äî –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ —Ä–∞–º–∫–∞—Ö –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.
        –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–∞–Ω–æ —á–∏—Å–ª–æ ùëõ (1‚â§ùëõ‚â§10^5)‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
        –î–∞–ª–µ–µ –¥–∞–Ω–æ n —Å—Ç—Ä–æ–∫. –í i-–π —Å—Ç—Ä–æ–∫–µ –ø–µ—Ä–≤—ã–º —á–∏—Å–ª–æ–º –∏–¥—ë—Ç ùëéùëñ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö i-–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
        –î–∞–ª–µ–µ –∏–¥–µ—Ç ai —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ‚Äî –∏—Ö –Ω–æ–º–µ—Ä–∞.
        –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        –í –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤—ã–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ k ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑–±–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.
        –í —Å–ª–µ–¥—É—é—â–∏—Ö k —Å—Ç—Ä–æ–∫–∞—Ö –≤—ã–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∏—Ö –º–Ω–æ–∂–µ—Å—Ç–≤:
        –ø–µ—Ä–≤—ã–º —á–∏—Å–ª–æ–º —É–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–∞ ki, –∞ –¥–∞–ª–µ–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ki —á–∏—Å–µ–ª –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è ‚Äî –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞.

–ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–∏–º–µ—Ä 1
5
3 2 3 5
1 4
0
0
1 3

3
2 3 4
2 2 5
1 1
–ü—Ä–∏–º–µ—Ä 2
6
1 2
1 3
1 4
1 5
1 6
0

6
1 6
1 5
1 4
1 3
1 2
1 1
–ü—Ä–∏–º–µ—Ä 3
6
5 2 3 4 5 6
0
0
0
0
0

2
5 2 3 4 5 6
1 1
–ü—Ä–∏–º–µ—Ä 4
3
0
0
0

1
3 1 2 3

        */

import java.util.*;

public class T_SaurusSets {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        List<List<Integer>> dependencies = new ArrayList<>(n + 1);
        int[] indegree = new int[n + 1];

        for (int i = 0; i <= n; i++) {
            dependencies.add(new ArrayList<>());
        }

        for (int i = 1; i <= n; i++) {
            int ai = scanner.nextInt();
            for (int j = 0; j < ai; j++) {
                int dep = scanner.nextInt();
                dependencies.get(dep).add(i);
                indegree[i]++;
            }
        }

        List<List<Integer>> result = new ArrayList<>();
        Queue<Integer> queue = new LinkedList<>();

        for (int i = 1; i <= n; i++) {
            if (indegree[i] == 0) {
                queue.add(i);
            }
        }

        while (!queue.isEmpty()) {
            List<Integer> currentBatch = new ArrayList<>();

            while (!queue.isEmpty()) {
                currentBatch.add(queue.poll());
            }

            Collections.sort(currentBatch);
            result.add(currentBatch);

            for (int process : currentBatch) {
                for (int dependent : dependencies.get(process)) {
                    indegree[dependent]--;
                    if (indegree[dependent] == 0) {
                        queue.add(dependent);
                    }
                }
            }
        }

        System.out.println(result.size());
        for (List<Integer> batch : result) {
            System.out.print(batch.size() + " ");
            for (int process : batch) {
                System.out.print(process + " ");
            }
            System.out.println();
        }

        scanner.close();
    }
}
